name: citra-build

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]

jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msvc", "clang", "gcc"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'clang' || matrix.target == 'gcc') && 'msys2' || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1.13.0
        if: ${{ matrix.target == 'msvc' }}
      - name: Install extra tools (MSVC)
        run: choco install ccache ninja wget
        if: ${{ matrix.target == 'msvc' }}
      - name: Install Vulkan SDK (MSVC)
        uses: humbletim/install-vulkan-sdk@v1.1.1
        with:
          version: latest
          cache: true
        if: ${{ matrix.target == 'msvc' }}
      - name: Set up MSYS2 (clang)
        uses: msys2/setup-msys2@v2.24.1
        if: ${{ matrix.target == 'clang' }}
        with:
          msystem: clang64
          update: true
          install: git make p7zip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p 
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
      - name: Set up MINGW (gcc)
        uses: msys2/setup-msys2@v2.24.1
        with:
          msystem: mingw64
          update: true
          install: git make p7zip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
        if: ${{ matrix.target == 'gcc' }}
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Build (MSVC)
        run: ./.ci/windows-msvc.sh
        if: ${{ matrix.target == 'msvc' }}
      - name: Build (CLANG)
        run: ./.ci/windows-clang.sh
        if: ${{ matrix.target == 'clang' }}
      - name: Build (GCC)
        run: ./.ci/windows-gcc.sh
        if: ${{ matrix.target == 'gcc' }}
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  android:
    runs-on: ubuntu-24.04
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: android
      TARGET: universal
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-
      - name: Set tag name
        run: |
          if [[ "$GITHUB_REF_NAME" =~ ^canary- ]] || [[ "$GITHUB_REF_NAME" =~ ^nightly- ]]; then
              echo "GIT_TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
          fi
          echo $GIT_TAG_NAME
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: zip unzip python3 ccache apksigner clang-format-15 apparmor cloud-init firefox libapparmor1 libapr1t64 libcups2t64 libopenjp2-7 libproc2-0 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure lxd-agent-loader mdadm nvme-cli open-vm-tools procps python3-update-manager systemd-hwe-hwdb ubuntu-pro-client ubuntu-pro-client-l10n update-manager-core php8.3 php8.3-bcmath php8.3-bz2 php8.3-cgi php8.3-cli php8.3-common php8.3-curl php8.3-dba php8.3-dev php8.3-enchant php8.3-fpm php8.3-gd php8.3-gmp php8.3-imap php8.3-interbase php8.3-intl php8.3-ldap php8.3-mbstring php8.3-mysql php8.3-odbc php8.3-opcache php8.3-pgsql php8.3-phpdbg php8.3-pspell php8.3-readline php8.3-snmp php8.3-soap php8.3-sqlite3 php8.3-sybase php8.3-tidy php8.3-xml php8.3-xsl php8.3-zip vim vim-common vim-runtime vim-tiny xxd unzip
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.30.4
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install JDK 22
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '22'
          cache: 'gradle'
          check-latest: true
      - name: Build
        run: JAVA_HOME=$JAVA_HOME_22_X64 ./.ci/android.sh
        env:
          DROID_KEYSTORE_B64: ${{ secrets.DROID_KEYSTORE_B64 }}
          DROID_KEY_ALIAS: ${{ secrets.DROID_KEY_ALIAS }}
          DROID_KEYSTORE_PASS: ${{ secrets.DROID_KEYSTORE_PASS }}
          DROID_KEY_PASS: ${{ secrets.DROID_KEY_PASS }}
      - name: Pack
        run: ../../../.ci/pack.sh
        working-directory: src/android/app
        env:
          UNPACKED: 1
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: src/android/app/artifacts/
