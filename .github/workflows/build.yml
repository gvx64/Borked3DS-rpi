name: citra-build

on:
  push:
    branches: [ "*" ]
    tags: [ "*" ]
  pull_request:
    branches: [ master ]

jobs:
  source:
    if: ${{ !github.head_ref }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Pack
        run: ./.ci/source.sh
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: source
          path: artifacts/
  linux-clang-focal:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: ["appimage-clang-20.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Remove System Clang
        run: sudo apt autoremove clang-10 clang-format-10 clang-tidy-10 clang-11 clang-format-11 clang-tidy-11 clang-12 clang-format-12 clang-tidy-12 -y
      - name: Install Clang PPA
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/focal/ llvm-toolchain-focal-19 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/test
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: gcc-11-base gcc-13-base ca-certificates cloud-init dotnet-sdk-8.0 firefox lib32gcc-s1 lib32stdc++6 libapr1 libasan6 libatomic1 libcc1-0 libcups2 libgcc-s1 libgfortran5 libgomp1 libitm1 liblsan0 libobjc4 libpcap0.8 libquadmath0 libstdc++6 libtsan0 libubsan1 python3-configobj python3-update-manager ubuntu-advantage-tools ubuntu-pro-client ubuntu-pro-client-l10n update-manager-core vim vim-common vim-runtime vim-tiny xxd ccache clang-19 clang-19-doc clang-format-19 clang-tidy-19 clang-tools-19 clangd-19 cpp-13 fonts-mathjax g++-13 gcc-13 jackd jackd2 jackd2-firewire libasan8 libasound2-dev libasyncns0 libaudio-dev libaudio2 libc++-19-dev libc++1-19 libc++abi-19-dev libc++abi1-19 libclang-19-dev libclang-common-19-dev libclang-cpp19 libclang-rt-19-dev libclang1-19 libconfig++9v5 libdmx-dev libdmx1 libdouble-conversion3 libdrm-dev libegl-mesa0 libegl1 libevdev2 libffado2 libflac8 libfontenc-dev libfs-dev libfs6 libgcc-13-dev libgl-dev libglibmm-2.4-1v5 libglx-dev libhwasan0 libiec61883-0 libinput-bin libinput10 libjack-jackd2-0 libjs-mathjax libllvm19 libmtdev1 libpciaccess-dev libpipewire-0.2-1 libpipewire-0.2-dev libpulse-dev libpulse-mainloop-glib0 libpulse0 libqt5core5a libqt5dbus5 libqt5gui5 libqt5network5 libqt5svg5 libqt5widgets5 libqt5x11extras5 libqt5xml5 libraw1394-11 libsamplerate0 libsigc++-2.0-0v5 libsndfile1 libsndio-dev libsndio7.0 libspa-lib-0.1-dev libstdc++-13-dev libtsan2 libunwind-19 libunwind-19-dev libvorbisenc2 libwacom-bin libwacom-common libwacom2 libxaw7-dev libxcb-cursor-dev libxcb-cursor0 libxcb-icccm4 libxcb-image0 libxcb-image0-dev libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-render-util0-dev libxcb-shape0 libxcb-util1 libxcb-xinerama0 libxcb-xinput0 libxcb-xkb-dev libxcb-xkb1 libxcomposite-dev libxcursor-dev libxdamage-dev libxfixes-dev libxfont-dev libxi-dev libxinerama-dev libxkbcommon-x11-0 libxml++2.6-2v5 libxmu-dev libxmu-headers libxmuu-dev libxpm-dev libxrandr-dev libxres-dev libxres1 libxss-dev libxtst-dev libxv-dev libxv1 libxvmc-dev libxvmc1 libxxf86dga-dev libxxf86dga1 libxxf86vm-dev llvm-19 llvm-19-dev llvm-19-linker-tools llvm-19-runtime llvm-19-tools mesa-common-dev python-dbus python-gi python3-clang-19 qjackctl qt5-gtk-platformtheme qttranslations5-l10n x11proto-input-dev x11proto-randr-dev x11proto-record-dev x11proto-scrnsaver-dev x11proto-xf86dga-dev x11proto-xf86vidmode-dev x11proto-xinerama-dev xorg-dev xserver-xorg-dev gstreamer1.0-gl gstreamer1.0-plugins-base libcdparanoia0 libegl-dev libgl1-mesa-dev libgles-dev libgles1 libgles2 libglvnd-dev libgraphene-1.0-0 libgstreamer-gl1.0-0 libgstreamer-plugins-base1.0-0 libopengl-dev libopengl0 libopus0 liborc-0.4-0 libtheora0 libvisual-0.4-0 libxkbcommon-dev zip unzip
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.30.4
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: '6.8.*'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-clang-20.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-clang-20.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        if: ${{ matrix.target == 'appimage-clang-20.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  linux-clang-jammy:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: ["appimage-clang-22.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Remove System Clang
        run: sudo apt autoremove clang-13 clang-format-13 clang-tidy-13 clang-14 clang-format-14 clang-tidy-14 clang-15 clang-format-15 clang-tidy-15 -y
      - name: Install Clang PPA 
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: ccache gcc-11 clang-19 clang-tools-19 clang-19-doc libxcb-xkb-dev libclang-common-19-dev libclang-19-dev libclang1-19 clang-format-19 python3-clang-19 clangd-19 clang-tidy-19 clang-format-15 libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev apparmor aspnetcore-runtime-6.0 aspnetcore-runtime-7.0 aspnetcore-targeting-pack-6.0 aspnetcore-targeting-pack-7.0 ca-certificates cloud-init dotnet-apphost-pack-6.0 dotnet-apphost-pack-7.0 dotnet-hostfxr-6.0 dotnet-runtime-6.0 dotnet-runtime-7.0 dotnet-sdk-8.0 dotnet-targeting-pack-6.0 dotnet-targeting-pack-7.0 firefox libapparmor1 libapr1 libcups2 libcurl3-gnutls libmm-glib0 libopenjp2-7 libopenjp2-7-dev libpcap0.8 linux-cloud-tools-common linux-tools-common netstandard-targeting-pack-2.1 podman python3-configobj ubuntu-advantage-tools ubuntu-minimal ubuntu-pro-client ubuntu-pro-client-l10n ubuntu-server ubuntu-standard php8.1 php8.1-bcmath php8.1-bz2 php8.1-cgi php8.1-cli php8.1-common php8.1-curl php8.1-dba php8.1-dev php8.1-enchant php8.1-fpm php8.1-gd php8.1-gmp php8.1-imap php8.1-interbase php8.1-intl php8.1-ldap php8.1-mbstring php8.1-mysql php8.1-odbc php8.1-opcache php8.1-pgsql php8.1-phpdbg php8.1-pspell php8.1-readline php8.1-snmp php8.1-soap php8.1-sqlite3 php8.1-sybase php8.1-tidy php8.1-xml php8.1-xsl php8.1-zip vim vim-common vim-runtime vim-tiny xxd netplan-generator python3-netplan libnetplan0 netplan.io zip unzip
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.30.4
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: '6.8.*'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-clang-22.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-clang-22.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        if: ${{ matrix.target == 'appimage-clang-22.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  linux-clang-noble:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target: ["appimage-clang-24.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Remove System Clang
        run: sudo apt autoremove clang-16 clang-format-16 clang-tidy-16 clang-17 clang-format-17 clang-tidy-17 clang-18 clang-format-18 clang-tidy-18 -y
      - name: Install Clang PPA
        uses: myci-actions/add-deb-repo@11
        with:
          repo: deb http://apt.llvm.org/noble/ llvm-toolchain-noble-19 main
          repo-name: llvm
          keys-asc: https://apt.llvm.org/llvm-snapshot.gpg.key
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: ccache gcc-14 clang-19 clang-tools-19 clang-19-doc libxcb-xkb-dev libclang-common-19-dev libclang-19-dev libclang1-19 clang-format-19 python3-clang-19 clangd-19 clang-tidy-19 clang-format-15 libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev apparmor cloud-init firefox libapparmor1 libapr1t64 libcups2t64 libopenjp2-7 libproc2-0 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure lxd-agent-loader mdadm nvme-cli open-vm-tools procps python3-update-manager systemd-hwe-hwdb ubuntu-pro-client ubuntu-pro-client-l10n update-manager-core php8.3 php8.3-bcmath php8.3-bz2 php8.3-cgi php8.3-cli php8.3-common php8.3-curl php8.3-dba php8.3-dev php8.3-enchant php8.3-fpm php8.3-gd php8.3-gmp php8.3-imap php8.3-interbase php8.3-intl php8.3-ldap php8.3-mbstring php8.3-mysql php8.3-odbc php8.3-opcache php8.3-pgsql php8.3-phpdbg php8.3-pspell php8.3-readline php8.3-snmp php8.3-soap php8.3-sqlite3 php8.3-sybase php8.3-tidy php8.3-xml php8.3-xsl php8.3-zip vim vim-common vim-runtime vim-tiny xxd unzip zip
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.30.4
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: '6.8.*'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-clang-24.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-clang-24.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        if: ${{ matrix.target == 'appimage-clang-24.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  linux-gcc-noble:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        target: ["appimage-gcc-24.04", "fresh"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: linux
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Install GCC PPA
        run: sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: ccache gcc-14 clang-format-15 build-essential libxcb-xkb-dev libasound-dev xorg-dev libx11-dev libxext-dev jackd libpipewire-0.3-dev libsndio-dev libxcb-cursor-dev libasound2-dev libpulse-dev libaudio-dev libjack-dev libsndio-dev libx11-dev libxext-dev libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev apparmor cloud-init firefox libapparmor1 libapr1t64 libcups2t64 libopenjp2-7 libproc2-0 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure lxd-agent-loader mdadm nvme-cli open-vm-tools procps python3-update-manager systemd-hwe-hwdb ubuntu-pro-client ubuntu-pro-client-l10n update-manager-core php8.3 php8.3-bcmath php8.3-bz2 php8.3-cgi php8.3-cli php8.3-common php8.3-curl php8.3-dba php8.3-dev php8.3-enchant php8.3-fpm php8.3-gd php8.3-gmp php8.3-imap php8.3-interbase php8.3-intl php8.3-ldap php8.3-mbstring php8.3-mysql php8.3-odbc php8.3-opcache php8.3-pgsql php8.3-phpdbg php8.3-pspell php8.3-readline php8.3-snmp php8.3-soap php8.3-sqlite3 php8.3-sybase php8.3-tidy php8.3-xml php8.3-xsl php8.3-zip vim vim-common vim-runtime vim-tiny xxd unzip zip
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.30.4
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          aqtversion: '==3.1.*'
          version: '6.8.*'
          host: 'linux'
          target: 'desktop'
          arch: 'linux_gcc_64'
          modules: 'qtmultimedia qtwaylandcompositor'
          cache: 'true'
      - name: Install mold linker
        uses: rui314/setup-mold@v1
        with:
          make-default: false
      - name: Build
        run: ./.ci/linux-gcc-24.04.sh
      - name: Pack
        run: ./.ci/pack.sh
        if: ${{ matrix.target == 'appimage-gcc-24.04' }}
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        if: ${{ matrix.target == 'appimage-gcc-24.04' }}
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  macos:
    runs-on: ${{ (matrix.target == 'x86_64' && 'macos-13') || 'macos-14' }}
    strategy:
      matrix:
        target: ["x86_64", "arm64"]
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: macos
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: latest-stable
      - name: Install tools
        uses: tecolicom/actions-use-homebrew-tools@v1.3
        with:
          tools: ccache ninja
      - name: Build
        run: ./.ci/macos.sh
      - name: Prepare outputs for caching
        run: mv build/bundle $OS-$TARGET
      - name: Cache outputs for universal build
        uses: actions/cache/save@v4.1.0
        with:
          path: ${{ env.OS }}-${{ env.TARGET }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
  macos-universal:
    runs-on: macos-14
    needs: macos
    env:
      OS: macos
      TARGET: universal
    steps:
      - uses: actions/checkout@v4.2.0
      - name: Download x86_64 build from cache
        uses: actions/cache/restore@v4.1.0
        with:
          path: ${{ env.OS }}-x86_64
          key: ${{ runner.os }}-x86_64-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true
      - name: Download ARM64 build from cache
        uses: actions/cache/restore@v4.1.0
        with:
          path: ${{ env.OS }}-arm64
          key: ${{ runner.os }}-arm64-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}
          fail-on-cache-miss: true
      - name: Create universal app
        run: ./.ci/macos-universal.sh
        env:
          ARTIFACTS: ${{ env.OS }}-x86_64 ${{ env.OS }}-arm64
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: ["msvc", "clang", "gcc"]
    defaults:
      run:
        shell: ${{ (matrix.target == 'clang' || matrix.target == 'gcc') && 'msys2' || 'bash' }} {0}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ matrix.target }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-
      - name: Set up MSVC
        uses: ilammy/msvc-dev-cmd@v1.13.0
        if: ${{ matrix.target == 'msvc' }}
      - name: Install extra tools (MSVC)
        run: choco install ccache ninja wget unzip
        if: ${{ matrix.target == 'msvc' }}
      - name: Install Vulkan SDK (MSVC)
        uses: humbletim/install-vulkan-sdk@v1.1.1
        with:
          version: latest
          cache: true
        if: ${{ matrix.target == 'msvc' }}
      - name: Set up MSYS2 (clang)
        uses: msys2/setup-msys2@v2.24.1
        if: ${{ matrix.target == 'clang' }}
        with:
          msystem: clang64
          update: true
          install: git make p7zip unzip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p 
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
      - name: Set up MINGW (gcc)
        uses: msys2/setup-msys2@v2.24.1
        with:
          msystem: mingw64
          update: true
          install: git make p7zip unzip
          pacboy: >-
            toolchain:p ccache:p cmake:p ninja:p
            qt6-base:p qt6-multimedia:p qt6-multimedia-wmf:p qt6-tools:p qt6-translations:p
        if: ${{ matrix.target == 'gcc' }}
      - name: Disable line ending translation
        run: git config --global core.autocrlf input
      - name: Build (MSVC)
        run: ./.ci/windows-msvc.sh
        if: ${{ matrix.target == 'msvc' }}
      - name: Build (CLANG)
        run: ./.ci/windows-clang.sh
        if: ${{ matrix.target == 'clang' }}
      - name: Build (GCC)
        run: ./.ci/windows-gcc.sh
        if: ${{ matrix.target == 'gcc' }}
      - name: Pack
        run: ./.ci/pack.sh
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/
  android:
    runs-on: ubuntu-24.04
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: android
      TARGET: universal
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-
      - name: Set tag name
        run: |
          if [[ "$GITHUB_REF_NAME" =~ ^canary- ]] || [[ "$GITHUB_REF_NAME" =~ ^nightly- ]]; then
              echo "GIT_TAG_NAME=$GITHUB_REF_NAME" >> $GITHUB_ENV
          fi
          echo $GIT_TAG_NAME
      - name: Install New Packages
        uses: gerlero/apt-install@v1.2.2
        with:
          packages: zip unzip python3 ccache apksigner clang-format-15 apparmor cloud-init firefox libapparmor1 libapr1t64 libcups2t64 libopenjp2-7 libproc2-0 linux-azure linux-cloud-tools-azure linux-headers-azure linux-image-azure linux-tools-azure lxd-agent-loader mdadm nvme-cli open-vm-tools procps python3-update-manager systemd-hwe-hwdb ubuntu-pro-client ubuntu-pro-client-l10n update-manager-core php8.3 php8.3-bcmath php8.3-bz2 php8.3-cgi php8.3-cli php8.3-common php8.3-curl php8.3-dba php8.3-dev php8.3-enchant php8.3-fpm php8.3-gd php8.3-gmp php8.3-imap php8.3-interbase php8.3-intl php8.3-ldap php8.3-mbstring php8.3-mysql php8.3-odbc php8.3-opcache php8.3-pgsql php8.3-phpdbg php8.3-pspell php8.3-readline php8.3-snmp php8.3-soap php8.3-sqlite3 php8.3-sybase php8.3-tidy php8.3-xml php8.3-xsl php8.3-zip vim vim-common vim-runtime vim-tiny xxd unzip
      - name: Update System Packages
        run: sudo apt-get update && sudo apt-get -y dist-upgrade && sudo apt-get clean
      - name: Get latest CMake and Ninja
        uses: lukka/get-cmake@v3.30.4
        with:
          cmakeVersion: latest
          ninjaVersion: latest
      - name: Build
        run: JAVA_HOME=$JAVA_HOME_21_X64 ./.ci/android.sh
        env:
          DROID_KEYSTORE_B64: ${{ secrets.DROID_KEYSTORE_B64 }}
          DROID_KEY_ALIAS: ${{ secrets.DROID_KEY_ALIAS }}
          DROID_KEYSTORE_PASS: ${{ secrets.DROID_KEYSTORE_PASS }}
          DROID_KEY_PASS: ${{ secrets.DROID_KEY_PASS }}
      - name: Pack
        run: ../../../.ci/pack.sh
        working-directory: src/android/app
        env:
          UNPACKED: 1
      - name: Upload
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: src/android/app/artifacts/
  ios:
    runs-on: macos-15
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: ios
      TARGET: arm64
    steps:
      - uses: actions/checkout@v4.2.0
        with:
          submodules: recursive
      - name: Set up cache
        uses: actions/cache@v4.1.0
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-ios-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ios-
      - name: Setup XCode
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: latest-stable
      - name: Install tools
        uses: tecolicom/actions-use-homebrew-tools@v1.3
        with:
          tools: ccache ninja
      - name: Build
        run: ./.ci/ios.sh
  release:
    runs-on: ubuntu-latest
    needs: [windows, linux-clang-focal, linux-clang-jammy, linux-clang-noble, linux-gcc-noble, macos-universal, android, source]
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v4.1.8
      - name: Create release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload artifacts
        uses: alexellis/upload-assets@0.4.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./**/*.tar.*","./**/*.AppImage","./**/*.zip","./**/*.apk","./**/*.aab"]'
